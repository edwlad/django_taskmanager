"""
Django settings for taskmanager project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-pj+s*o#gdc$nhlyo&$dr-mgntcw_gp%c5fn#$=#wb0i*eebo=2"
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    "django-insecure-pj+s*o#gdc$nhlyo&$dr-mgntcw_gp%c5fn#$=#wb0i*eebo=2",
)

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = bool(os.environ.get("DJANGO_DEBUG", True))

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "app_task",
    "api_task",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "taskmanager.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "taskmanager.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        # "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "postgres",
        "USER": "postgres",
        "PASSWORD": "",
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"
# LANGUAGE_CODE = "utf8"

TIME_ZONE = "Etc/GMT-7"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ============================================================
# My Settings

# расшифровка операций
MY_OPER = {
    "list": "Список",
    "detail": "Просмотр",
    "add": "Добавление",
    "edit": "Редактирование",
    "delete": "Удаление",
}

# шаблон начала имени тестовых пользователей и пароль
MY_TEST_USER = "user"
MY_TEST_PASS = "U-321rew"

# настройки логирования
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        # "full": {
        #     "()": "django.utils.log.CallbackFilter",
        #     "callback": lambda rec: True,
        # },
    },
    "formatters": {
        "verbose": {
            "format": "%(levelname)-8s %(asctime)s"
            " [%(filename)s:%(lineno)4d] (%(name)s) %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "brief": {
            "format": "%(levelname)-8s %(asctime)s %(name)s %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "console_debug": {
            "class": "logging.StreamHandler",
            "filters": ["require_debug_true"],
            "level": "INFO",
            "formatter": "verbose",
        },
        "console_no_debug": {
            "class": "logging.StreamHandler",
            "filters": ["require_debug_false"],
            "level": "WARNING",
            "formatter": "brief",
        },
    },
    "loggers": {
        "": {  # root logger
            "level": "DEBUG",
            "handlers": ["console_debug", "console_no_debug"],
        },
        "more": {
            "level": "DEBUG" if DEBUG else "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
        # "app_task": {
        #     "level": "DEBUG",
        #     "handlers": ["console"],
        #     "propagate": False,
        # },
        "app_task.functions.perms": {
            "level": "INFO",
            "handlers": ["console_debug"],
            "propagate": False,
        },
        "django": {
            # "level": os.environ.get("DJANGO_LOG_LEVEL", "INFO"),
            "level": "INFO",
            "handlers": ["console_debug"],
            "propagate": False,
        },
    },
}

# Email настройки
MY_EMAIL_ON = True
if MY_EMAIL_ON:
    if DEBUG:
        # выводит сообщения на стандартный вывод
        EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    else:
        EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
else:
    # фиктивный бэк - ничего не делает с сообщенияями
    EMAIL_BACKEND = "django.core.mail.backends.dummy.EmailBackend"
EMAIL_HOST = "127.0.0.1"
EMAIL_PORT = "465"
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ""
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True
ADMINS = (("Admin", "admin@none.none"),)
MANAGERS = ADMINS

# Login настройки
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# Пагинация настройки
PAGINATE_BY = 5  # элементов на странице
# на последней странице элементов <= orphans, то добавить их к предыдущей странице
PAGINATE_ORPHANS = 2

# REST настройки
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

# теги для видов сообщений
MESSAGE_TAGS = {
    10: "alert-dark",  # DEBUG - встроеный
    20: "alert-info",  # INFO - встроеный
    25: "alert-success",  # SUCCESS - встроеный
    30: "alert-warning",  # WARNING - встроеный
    40: "alert-danger",  # ERROR - встроеный
}
